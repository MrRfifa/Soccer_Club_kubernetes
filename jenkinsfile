pipeline {
  agent any
  tools {
    dockerTool 'docker'
    nodejs 'node js'
  }

  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }

    stage('Analyses SonarQube') {
      parallel {
        stage('SonarQube analysis - Backend') {
          steps {
            dir('server') {
              script {
                def scannerHome = tool 'sonar'
                withSonarQubeEnv('SonarQube') {
                  sh ""
                  "${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=server \
                    -Dsonar.sources=. \
                    -Dsonar.exclusions=**/node_modules/**,**/clones/**,**/test/**,**/uploads/**,*.json,*.log,.*,Dockerfile \
                    -Dsonar.host.url=http://4.178.105.174:9000 \
                    -Dsonar.login=${SONAR_TOKEN}"
                  ""
                }
              }
            }
          }
        }

        stage('SonarQube analysis - front-office') {
          steps {
            dir('client') {
              script {
                def scannerHome = tool 'sonar'
                withSonarQubeEnv('SonarQube') {
                  sh ""
                  "${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=front-office \
                    -Dsonar.sources=./src \
                    -Dsonar.host.url=http://4.178.105.174:9000 \
                    -Dsonar.login=${SONAR_TOKEN}"
                  ""
                }
              }
            }
          }
        }

        stage('SonarQube analysis - back-office') {
          steps {
            dir('admin') {
              script {
                def scannerHome = tool 'sonar'
                withSonarQubeEnv('SonarQube') {
                  sh ""
                  "${scannerHome}/bin/sonar-scanner \
                    -Dsonar.projectKey=back-office \
                    -Dsonar.sources=./src \
                    -Dsonar.host.url=http://4.178.105.174:9000 \
                    -Dsonar.login=${SONAR_TOKEN}"
                  ""
                }
              }
            }
          }
        }
      }
    }

    stage('Construction des images') {
      parallel {

        stage('Build backend image') {
          steps {
            dir('server') {
              sh 'docker build -t mrrfifa/soccer-club-server .'
            }
          }
        }

        stage('Build front-office image') {
          steps {
            dir('client') {
              sh 'docker build -t mrrfifa/soccer-club-client .'
            }
          }
        }

        stage('Build back-office image') {
          steps {
            dir('admin') {
              sh 'docker build -t mrrfifa/soccer-club-admin .'
            }
          }
        }
      }
    }

    stage('Push images to Docker Hub') {
      steps {
        sh 'docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD'
        sh 'docker push mrrfifa/soccer-club-server'
        sh 'docker push mrrfifa/soccer-club-client'
        sh 'docker push mrrfifa/soccer-club-admin'
      }
    }
    stage('Set Azure Subscription') {
      steps {
        withCredentials([string(credentialsId: 'azure_subscription', variable: 'AZURE_SUBSCRIPTION_ID')]) {
          script {
            sh "az cloud set --name AzureCloud"
            sh "az login"
            sh "az account set --subscription \${AZURE_SUBSCRIPTION_ID}"
          }
        }
      }
    }
    stage('Retrieve AKS Credentials') {
      steps {
        script {
          sh 'az aks get-credentials --resource-group $AKS_RESOURCE_GROUP --name $AKS_CLUSTER_NAME'
        }
      }
    }

    stage('Deploy Secret and ConfigMap to AKS') {
      steps {
        script {

          sh "kubectl apply -f kubernetes/general"
        }
      }
    }
    stage('Deploy applications to AKS') {
      steps {
        script {
          sh "kubectl apply -f kubernetes/app"

        }
      }
    }
  }
}